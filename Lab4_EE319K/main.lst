


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Carlos Borja & Nyree Masoian
    3 00000000         ; Date Created: 2/14/2017
    4 00000000         ; Last Modified: 10/09/2018
    5 00000000         ; You are given a simple stepper motor software system w
                       ith one input and
    6 00000000         ; four outputs. This program runs, but you are asked to 
                       add minimally intrusive
    7 00000000         ; debugging instruments to verify it is running properly
                       . 
    8 00000000         ;   If the input PE4 is low, the stepper motor outputs c
                       ycle 10,6,5,9,...
    9 00000000         ;   If the input PE4 is high, the stepper motor outputs 
                       cycle 5,6,10,9,...
   10 00000000         ;   Insert debugging instruments which gather data (stat
                       e and timing)
   11 00000000         ;   to verify that the system is functioning as expected
                       .
   12 00000000         ; Hardware connections (External: One button and four ou
                       tputs to stepper motor)
   13 00000000         ;  PE4 is Button input  (1 means pressed, 0 means not pr
                       essed)
   14 00000000         ;  PE3-0 are stepper motor outputs 
   15 00000000         ;  PF2 is Blue LED on Launchpad used as a heartbeat
   16 00000000         ; Instrumentation data to be gathered is as follows:
   17 00000000         ; After every output to Port E, collect one state and ti
                       me entry. 
   18 00000000         ; The state information is the 5 bits on Port E PE4-0
   19 00000000         ;   place one 8-bit entry in your Data Buffer  
   20 00000000         ; The time information is the 24-bit time difference bet
                       ween this output and the previous (in 12.5ns units)
   21 00000000         ;   place one 32-bit entry in the Time Buffer
   22 00000000         ;    24-bit value of the SysTick's Current register (NVI
                       C_ST_CURRENT_R)
   23 00000000         ;    you must handle the roll over as Current goes 3,2,1
                       ,0,0x00FFFFFF,0xFFFFFE,
   24 00000000         ; Note: The size of both buffers is 100 entries. Once yo
                       u fill these
   25 00000000         ;       entries you should stop collecting data
   26 00000000         ; The heartbeat is an indicator of the running of the pr
                       ogram. 
   27 00000000         ; On each iteration of the main loop of your program tog
                       gle the 
   28 00000000         ; LED to indicate that your code(system) is live (not st
                       uck or dead).
   29 00000000         
   30 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   31 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   32 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   33 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   34 00000000 400FE608 



ARM Macro Assembler    Page 2 


                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   35 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   40 00000000         
   41 00000000         ; RAM Area
   42 00000000                 AREA             DATA, ALIGN=2
   43 00000000 00 00 00 
              00       Index   SPACE            4           ; index into Steppe
                                                            r table 0,1,2,3
   44 00000004 00 00 00 
              00       Direction
                               SPACE            4           ; -1 for CCW, 0 for
                                                             stop 1 for CW
   45 00000008         
   46 00000008         ;place your debug variables in RAM here
   47 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       TimeBuffer
                               SPACE            400
   48 00000198 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       DataBuffer
                               SPACE            100
   49 000001FC 00 00 00 
              00       TimePointer
                               SPACE            4
   50 00000200 00 00 00 
              00       DataPointer
                               SPACE            4
   51 00000204         
   52 00000204         ; ROM Area
   53 00000204                 IMPORT           TExaS_Init
   54 00000204                 IMPORT           SysTick_Init
   55 00000204         ;-UUU-Import routine(s) from other assembly files (like 
                       SysTick.s) here
   56 00000204                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   57 00000000                 THUMB
   58 00000000 05 06 0A 
              09       Stepper DCB              5,6,10,9
   59 00000004                 EXPORT           Start
   60 00000004         
   61 00000004         Start
   62 00000004         ; TExaS_Init sets bus clock at 80 MHz
   63 00000004 F04F 0004       MOV              R0,#4       ; PORT E (PE5-PE0 o
                                                            ut logic analyzer t
                                                            o TExasDisplay)
   64 00000008 F7FF FFFE       BL               TExaS_Init  ; logic analyzer, 8
                                                            0 MHz
   65 0000000C         ;place your initializations here
   66 0000000C F000 F81D       BL               Stepper_Init ; initialize stepp
                                                            er motor
   67 00000010         
   68 00000010         ;**********************
   69 00000010 F000 F84F       BL               Debug_Init  ;(you write this)
   70 00000014         ;**********************
   71 00000014 B662            CPSIE            I           ; TExaS logic analy
                                                            zer runs on interru
                                                            pts
   72 00000016 F04F 0500       MOV              R5,#0       ; last PE4



ARM Macro Assembler    Page 6 


   73 0000001A         loop
   74 0000001A         
   75 0000001A 4938            LDR              R1,=GPIO_PORTE_DATA_R
   76 0000001C 680C            LDR              R4,[R1]     ;current value of s
                                                            witch
   77 0000001E F004 0410       AND              R4,R4,#0x10 ; select just bit 4
                                                            
   78 00000022 2C00            CMP              R4,#0
   79 00000024 D00A            BEQ              no          ; skip if not pushe
                                                            d
   80 00000026 2D00            CMP              R5,#0
   81 00000028 D108            BNE              no          ; skip if pushed la
                                                            st time
   82 0000002A         ; this time yes, last time no
   83 0000002A 4935            LDR              R1,=Direction
   84 0000002C 6808            LDR              R0,[R1]     ; current direction
                                                            
   85 0000002E F100 0001       ADD              R0,R0,#1    ;-1,0,1 to 0,1,2
   86 00000032 2802            CMP              R0,#2
   87 00000034 D101            BNE              ok
   88 00000036 F04F 30FF       MOV              R0,#-1      ; cycles through va
                                                            lues -1,0,1
   89 0000003A 6008    ok      STR              R0,[R1]     ; Direction=0 (CW) 
                                                             
   90 0000003C 4625    no      MOV              R5,R4       ; setup for next ti
                                                            me
   91 0000003E F000 F825       BL               Stepper_Step
   92 00000042 4830            LDR              R0,=1600000
   93 00000044 F000 F832       BL               Wait        ; time delay fixed 
                                                            but not accurate   
                                                            
   94 00000048 E7E7            B                loop
   95 0000004A         ;Initialize stepper motor interface
   96 0000004A         Stepper_Init
   97 0000004A F04F 0001       MOV              R0,#1
   98 0000004E 492C            LDR              R1,=Direction
   99 00000050 6008            STR              R0,[R1]     ; Direction=0 (CW)
  100 00000052 F04F 0000       MOV              R0,#0
  101 00000056 492C            LDR              R1,=Index
  102 00000058 6008            STR              R0,[R1]     ; Index=0
  103 0000005A         ; 1) activate clock for Port E
  104 0000005A 492C            LDR              R1, =SYSCTL_RCGCGPIO_R
  105 0000005C 6808            LDR              R0, [R1]
  106 0000005E F040 0010       ORR              R0, R0, #0x10 ; Clock for E
  107 00000062 6008            STR              R0, [R1]
  108 00000064 BF00            NOP
  109 00000066 BF00            NOP                          ; allow time to fin
                                                            ish activating
  110 00000068         ; 2) no need to unlock PE4-0
  111 00000068         ; 3) set direction register
  112 00000068 4929            LDR              R1, =GPIO_PORTE_DIR_R
  113 0000006A 6808            LDR              R0, [R1]
  114 0000006C F040 000F       ORR              R0, R0, #0x0F 
                                                            ; Output on PE0-PE3
                                                            
  115 00000070 F020 0010       BIC              R0, R0, #0x10 ; Input on PE4
  116 00000074 6008            STR              R0, [R1]
  117 00000076         ; 4) regular port function
  118 00000076 4927            LDR              R1, =GPIO_PORTE_AFSEL_R



ARM Macro Assembler    Page 7 


  119 00000078 6808            LDR              R0, [R1]
  120 0000007A F020 001F       BIC              R0, R0, #0x1F ; GPIO on PE4-0
  121 0000007E 6008            STR              R0, [R1]
  122 00000080         ; 5) enable digital port
  123 00000080 4925            LDR              R1, =GPIO_PORTE_DEN_R
  124 00000082 6808            LDR              R0, [R1]
  125 00000084 F040 001F       ORR              R0, R0, #0x1F ; enable PE4-0
  126 00000088 6008            STR              R0, [R1]
  127 0000008A 4770            BX               LR
  128 0000008C         ; Step the motor clockwise
  129 0000008C         ; Direction determines the rotational direction
  130 0000008C         ; Input: None
  131 0000008C         ; Output: None
  132 0000008C         Stepper_Step
  133 0000008C B510            PUSH             {R4,LR}
  134 0000008E 491E            LDR              R1,=Index
  135 00000090 680A            LDR              R2,[R1]     ; old Index
  136 00000092 4B1B            LDR              R3,=Direction
  137 00000094 6818            LDR              R0,[R3]     ; -1 for CCW, 0 for
                                                             stop 1 for CW
  138 00000096 4402            ADD              R2,R2,R0
  139 00000098 F002 0203       AND              R2,R2,#3    ; 0,1,2,3,0,1,2,...
                                                            
  140 0000009C 600A            STR              R2,[R1]     ; new Index
  141 0000009E 4B1F            LDR              R3,=Stepper ; table
  142 000000A0 5CD0            LDRB             R0,[R2,R3]  ; next output: 5,6,
                                                            10,9,5,6,10,...
  143 000000A2 4916            LDR              R1,=GPIO_PORTE_DATA_R 
                                                            ; change PE3-PE0
  144 000000A4 6008            STR              R0,[R1]
  145 000000A6 F000 F826       BL               Debug_Capture
  146 000000AA BD10            POP              {R4,PC}
  147 000000AC         ; inaccurate and inefficient time delay
  148 000000AC         Wait
  149 000000AC 1E40            SUBS             R0,R0,#1    ; outer loop
  150 000000AE D1FD            BNE              Wait
  151 000000B0 4770            BX               LR
  152 000000B2         
  153 000000B2         Debug_Init
  154 000000B2 B51F            PUSH             {R0-R4,LR}
  155 000000B4         
  156 000000B4         ;Populate Buffers   
  157 000000B4 481A            LDR              R0, =DataBuffer ;Starts at 0x20
                                                            00.019C
  158 000000B6 F04F 01FF       MOV              R1, #0xFF
  159 000000BA F04F 0200       MOV              R2, #0
  160 000000BE 5081    loop1   STR              R1, [R0,R2]
  161 000000C0 F102 0201       ADD              R2, R2, #1
  162 000000C4 2A64            CMP              R2, #100
  163 000000C6 D1FA            BNE              loop1
  164 000000C8         
  165 000000C8 4816            LDR              R0, =TimeBuffer ;Starts at 0x20
                                                            00.000C
  166 000000CA F04F 31FF       LDR              R1, =0xFFFFFFFF
  167 000000CE F04F 0200       MOV              R2, #0
  168 000000D2 F04F 0404       MOV              R4, #4
  169 000000D6 FB02 F304 
                       loop2   MUL              R3, R2, R4
  170 000000DA 50C1            STR              R1, [R0,R3]



ARM Macro Assembler    Page 8 


  171 000000DC F102 0201       ADD              R2, R2, #1
  172 000000E0 2A64            CMP              R2, #100
  173 000000E2 D1F8            BNE              loop2
  174 000000E4         
  175 000000E4         ;Data & Time Pointer init
  176 000000E4 4810            LDR              R0, =DataPointer
  177 000000E6 490E            LDR              R1, =DataBuffer
  178 000000E8 6001            STR              R1, [R0]
  179 000000EA         
  180 000000EA 4810            LDR              R0, =TimePointer
  181 000000EC 490D            LDR              R1, =TimeBuffer
  182 000000EE 6001            STR              R1, [R0]
  183 000000F0         
  184 000000F0         ;Start SysTick_Init
  185 000000F0 F7FF FFFE       BL               SysTick_Init
  186 000000F4         
  187 000000F4 BD1F            POP              {R0-R4,PC}
  188 000000F6         ;Debug capture      
  189 000000F6         Debug_Capture
  190 000000F6 B57F            PUSH             {R0-R6,LR}
  191 000000F8         ; you write this
  192 000000F8         
  193 000000F8 BD7F            POP              {R0-R6,PC}
  194 000000FA         
  195 000000FA         
  196 000000FA         
  197 000000FA 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  198 000000FC                 END                          ; end of file
              400243FC 
              00000000 
              00186A00 
              00000000 
              400FE608 
              40024400 
              40024420 
              4002451C 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_Lab4 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\
5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM
4C123 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 525" --pr
edefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.\main.lst main
.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 42 in file main.s
   Uses
      None
Comment: DATA unused
DataBuffer 00000198

Symbol: DataBuffer
   Definitions
      At line 48 in file main.s
   Uses
      At line 157 in file main.s
      At line 177 in file main.s

DataPointer 00000200

Symbol: DataPointer
   Definitions
      At line 50 in file main.s
   Uses
      At line 176 in file main.s
Comment: DataPointer used once
Direction 00000004

Symbol: Direction
   Definitions
      At line 44 in file main.s
   Uses
      At line 83 in file main.s
      At line 98 in file main.s
      At line 136 in file main.s

Index 00000000

Symbol: Index
   Definitions
      At line 43 in file main.s
   Uses
      At line 101 in file main.s
      At line 134 in file main.s

TimeBuffer 00000008

Symbol: TimeBuffer
   Definitions
      At line 47 in file main.s
   Uses
      At line 165 in file main.s
      At line 181 in file main.s

TimePointer 000001FC

Symbol: TimePointer
   Definitions
      At line 49 in file main.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 180 in file main.s
Comment: TimePointer used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 56 in file main.s
   Uses
      None
Comment: .text unused
Debug_Capture 000000F6

Symbol: Debug_Capture
   Definitions
      At line 189 in file main.s
   Uses
      At line 145 in file main.s
Comment: Debug_Capture used once
Debug_Init 000000B2

Symbol: Debug_Init
   Definitions
      At line 153 in file main.s
   Uses
      At line 69 in file main.s
Comment: Debug_Init used once
Start 00000004

Symbol: Start
   Definitions
      At line 61 in file main.s
   Uses
      At line 59 in file main.s
Comment: Start used once
Stepper 00000000

Symbol: Stepper
   Definitions
      At line 58 in file main.s
   Uses
      At line 141 in file main.s
Comment: Stepper used once
Stepper_Init 0000004A

Symbol: Stepper_Init
   Definitions
      At line 96 in file main.s
   Uses
      At line 66 in file main.s
Comment: Stepper_Init used once
Stepper_Step 0000008C

Symbol: Stepper_Step
   Definitions
      At line 132 in file main.s
   Uses
      At line 91 in file main.s
Comment: Stepper_Step used once
Wait 000000AC

Symbol: Wait



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 148 in file main.s
   Uses
      At line 93 in file main.s
      At line 150 in file main.s

loop 0000001A

Symbol: loop
   Definitions
      At line 73 in file main.s
   Uses
      At line 94 in file main.s
Comment: loop used once
loop1 000000BE

Symbol: loop1
   Definitions
      At line 160 in file main.s
   Uses
      At line 163 in file main.s
Comment: loop1 used once
loop2 000000D6

Symbol: loop2
   Definitions
      At line 169 in file main.s
   Uses
      At line 173 in file main.s
Comment: loop2 used once
no 0000003C

Symbol: no
   Definitions
      At line 90 in file main.s
   Uses
      At line 79 in file main.s
      At line 81 in file main.s

ok 0000003A

Symbol: ok
   Definitions
      At line 89 in file main.s
   Uses
      At line 87 in file main.s
Comment: ok used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 118 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 30 in file main.s
   Uses
      At line 75 in file main.s
      At line 143 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 123 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 112 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      None
Comment: GPIO_PORTF_AFSEL_R unused
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      None
Comment: GPIO_PORTF_DATA_R unused
GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 39 in file main.s
   Uses
      None
Comment: GPIO_PORTF_DEN_R unused
GPIO_PORTF_DIR_R 40025400




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      None
Comment: GPIO_PORTF_DIR_R unused
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 35 in file main.s
   Uses
      None
Comment: NVIC_ST_CURRENT_R unused
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 104 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 54 in file main.s
   Uses
      At line 185 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 53 in file main.s
   Uses
      At line 64 in file main.s
Comment: TExaS_Init used once
2 symbols
368 symbols in table
